name: Build and Release APK

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    name: Build APK
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Install jq for JSON parsing
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Install dependencies
        run: npm ci

      - name: Setup Expo CLI
        run: npm install -g @expo/cli

      - name: Setup EAS CLI
        run: npm install -g eas-cli

      - name: Authenticate with Expo
        run: eas login --non-interactive
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

      - name: Configure EAS build
        run: |
          cat > eas.json << EOF
          {
            "cli": {
              "version": ">= 5.4.0",
              "appVersionSource": "remote"
            },
            "build": {
              "development": {
                "distribution": "internal",
                "android": {
                  "gradleCommand": ":app:assembleDebug"
                }
              },
              "preview": {
                "distribution": "internal",
                "android": {
                  "buildType": "apk"
                }
              },
              "production": {
                "android": {
                  "buildType": "apk"
                },
                "env": {
                  "EXPO_NO_CAPABILITY_SYNC": "1"
                }
              }
            },
            "submit": {
              "production": {}
            }
          }
          EOF

      - name: Generate Android Keystore
        run: |
          echo "Generating Android Keystore for signing..."
          eas credentials:configure --platform android --profile production --non-interactive
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

      - name: Build APK
        id: build_apk
        run: |
          echo "Starting EAS build..."
          
          # Try remote build first
          if eas build --platform android --profile production --non-interactive --wait; then
            echo "Remote build completed successfully"
            echo "build_type=remote" >> $GITHUB_OUTPUT
          else
            echo "Remote build failed, falling back to local build..."
            echo "build_type=local" >> $GITHUB_OUTPUT
            
            # Install EAS Build tools for local builds
            npm install -g @expo/eas-build-job@latest
            
            # Create build directory
            mkdir -p ./build
            
            # Run local build
            eas build --platform android --profile production --local --output ./build/
          fi
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

      - name: Download APK (Remote Build)
        if: steps.build_apk.outputs.build_type == 'remote'
        run: |
          echo "Downloading built APK from remote build..."
          mkdir -p ./build
          
          echo "Getting latest build info..."
          eas build:list --platform android --status finished --limit 1 --json > build_info.json
          
          # Debug: Show build info
          echo "Build info:"
          cat build_info.json | jq '.'
          
          # Extract download URL from the build info
          DOWNLOAD_URL=$(cat build_info.json | jq -r '.[0].artifacts.buildUrl')
          BUILD_ID=$(cat build_info.json | jq -r '.[0].id')
          
          echo "Download URL: $DOWNLOAD_URL"
          echo "Build ID: $BUILD_ID"
          
          # Check if we have a valid download URL
          if [ "$DOWNLOAD_URL" = "null" ] || [ -z "$DOWNLOAD_URL" ]; then
            echo "Error: No download URL found. Build may have failed."
            echo "Full build info:"
            cat build_info.json
            exit 1
          fi
          
          # Download the APK
          echo "Downloading APK from: $DOWNLOAD_URL"
          curl -L -H "Authorization: Bearer $EXPO_TOKEN" -o "./build/watchbox-android.apk" "$DOWNLOAD_URL"
          
          # Check if download was successful
          if [ ! -f "./build/watchbox-android.apk" ]; then
            echo "Error: APK download failed"
            exit 1
          fi
          
          echo "APK downloaded successfully!"
          ls -la ./build/
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

      - name: Prepare APK (Local Build)
        if: steps.build_apk.outputs.build_type == 'local'
        run: |
          echo "Preparing APK from local build..."
          # Find the APK file and rename it
          find ./build -name "*.apk" -type f -exec mv {} ./build/watchbox-android.apk \;
          echo "APK prepared successfully!"
          ls -la ./build/

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: watchbox-apk
          path: ./build/*.apk

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: ./build/*.apk
          draft: false
          prerelease: false
          generate_release_notes: true
          name: Movie Watchlist ${{ github.ref_name }}
          body: |
            # üé¨ Movie Watchlist ${{ github.ref_name }}
            
            ## üì± Download APK
            Download the APK file below to install on your Android device.
            
            ## ‚ú® Features
            - üè† Discover trending, popular, and top-rated movies
            - üîç Smart search with real-time suggestions
            - üìö Personal watchlist with local storage
            - üé• In-app trailer playback
            - üé® Professional dark theme design
            - üéØ Browse movies by genre
            - üìä Movie details with cast, reviews, and more
            
            ## üîß Installation
            1. Download the APK file from the assets below
            2. Enable "Install from Unknown Sources" in your Android settings
            3. Install the APK
            4. Get your free TMDB API key from themoviedb.org
            5. Add your API key to the app settings
            
            ## üìã What's New
            ${{ github.event.head_commit.message }}
            
            ---
            **Developed by Pritam Karmakar ¬© 2025**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
