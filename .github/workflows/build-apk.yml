name: Build and Release APK

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    name: Build APK
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Install jq for JSON parsing
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Install dependencies
        run: npm ci

      - name: Setup Expo CLI
        run: npm install -g @expo/cli

      - name: Setup EAS CLI
        run: npm install -g eas-cli

      - name: Authenticate with Expo
        run: |
          echo "Authenticating with Expo using token..."
          # EAS CLI will use EXPO_TOKEN environment variable for authentication
          eas whoami
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

      - name: Verify EAS Configuration
        run: |
          echo "Verifying EAS configuration..."
          cat eas.json
          echo "EAS configuration verified!"

      - name: Generate Android Keystore
        run: |
          echo "Setting up Android credentials..."
          # EAS will automatically generate credentials when needed during build
          # No need for manual keystore setup in CI/CD
          echo "Credentials will be auto-generated during build process"
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

      - name: Build APK
        id: build_apk
        run: |
          echo "Starting EAS build..."
          
          # Use remote build (more reliable than local builds in CI)
          echo "Building APK with EAS remote build..."
          eas build --platform android --profile production --non-interactive
          
          echo "Build submitted successfully!"
          echo "build_type=remote" >> $GITHUB_OUTPUT
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

      - name: Wait for Build Completion
        run: |
          echo "Waiting for build to complete..."
          
          # Wait for the build to finish
          BUILD_ID=""
          MAX_ATTEMPTS=60  # Wait up to 60 minutes
          ATTEMPT=0
          
          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            echo "Checking build status... (Attempt $((ATTEMPT + 1))/$MAX_ATTEMPTS)"
            
            # Get the latest build for this project
            BUILD_INFO=$(eas build:list --platform android --limit 1 --json 2>/dev/null || echo "[]")
            
            if [ "$BUILD_INFO" != "[]" ]; then
              BUILD_STATUS=$(echo "$BUILD_INFO" | jq -r '.[0].status')
              BUILD_ID=$(echo "$BUILD_INFO" | jq -r '.[0].id')
              
              echo "Build ID: $BUILD_ID"
              echo "Build Status: $BUILD_STATUS"
              
              if [ "$BUILD_STATUS" = "finished" ]; then
                echo "Build completed successfully!"
                echo "build_id=$BUILD_ID" >> $GITHUB_OUTPUT
                break
              elif [ "$BUILD_STATUS" = "errored" ] || [ "$BUILD_STATUS" = "canceled" ]; then
                echo "Build failed with status: $BUILD_STATUS"
                exit 1
              fi
            fi
            
            # Wait 1 minute before checking again
            sleep 60
            ATTEMPT=$((ATTEMPT + 1))
          done
          
          if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
            echo "Build timeout after $MAX_ATTEMPTS minutes"
            exit 1
          fi
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

      - name: Download APK
        run: |
          echo "Downloading built APK..."
          mkdir -p ./build
          
          echo "Getting build info..."
          BUILD_INFO=$(eas build:list --platform android --status finished --limit 1 --json)
          
          # Debug: Show build info
          echo "Build info:"
          echo "$BUILD_INFO" | jq '.'
          
          # Extract download URL from the build info
          DOWNLOAD_URL=$(echo "$BUILD_INFO" | jq -r '.[0].artifacts.buildUrl')
          BUILD_ID=$(echo "$BUILD_INFO" | jq -r '.[0].id')
          
          echo "Download URL: $DOWNLOAD_URL"
          echo "Build ID: $BUILD_ID"
          
          # Check if we have a valid download URL
          if [ "$DOWNLOAD_URL" = "null" ] || [ -z "$DOWNLOAD_URL" ]; then
            echo "Error: No download URL found. Build may have failed."
            echo "Full build info:"
            echo "$BUILD_INFO" | jq '.'
            exit 1
          fi
          
          # Download the APK
          echo "Downloading APK from: $DOWNLOAD_URL"
          curl -L -o "./build/watchbox-android.apk" "$DOWNLOAD_URL"
          
          # Check if download was successful
          if [ ! -f "./build/watchbox-android.apk" ]; then
            echo "Error: APK download failed"
            exit 1
          fi
          
          # Get file size for verification
          FILE_SIZE=$(stat -c%s "./build/watchbox-android.apk")
          echo "APK downloaded successfully! Size: $FILE_SIZE bytes"
          ls -la ./build/
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

      - name: Prepare APK (Local Build)
        if: steps.build_apk.outputs.build_type == 'local'
        run: |
          echo "Preparing APK from local build..."
          # Find the APK file and rename it
          find ./build -name "*.apk" -type f -exec mv {} ./build/watchbox-android.apk \;
          echo "APK prepared successfully!"
          ls -la ./build/

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: watchbox-apk
          path: ./build/*.apk

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: ./build/*.apk
          draft: false
          prerelease: false
          generate_release_notes: true
          name: Movie Watchlist ${{ github.ref_name }}
          body: |
            # üé¨ Movie Watchlist ${{ github.ref_name }}
            
            ## üì± Download APK
            Download the APK file below to install on your Android device.
            
            ## ‚ú® Features
            - üè† Discover trending, popular, and top-rated movies
            - üîç Smart search with real-time suggestions
            - üìö Personal watchlist with local storage
            - üé• In-app trailer playback
            - üé® Professional dark theme design
            - üéØ Browse movies by genre
            - üìä Movie details with cast, reviews, and more
            
            ## üîß Installation
            1. Download the APK file from the assets below
            2. Enable "Install from Unknown Sources" in your Android settings
            3. Install the APK
            4. Get your free TMDB API key from themoviedb.org
            5. Add your API key to the app settings
            
            ## üìã What's New
            ${{ github.event.head_commit.message }}
            
            ---
            **Developed by Pritam Karmakar ¬© 2025**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
